syntax = "proto3";

option go_package = "github.com/liasica/edocseal/pb;pb";

package pb;

service Contract {
  // 创建合同
  rpc create(ContractCreateRequest) returns (ContractCreateResponse) {}

  // 合同签署
  rpc sign(ContractSignRequest) returns (ContractSignResponse) {}
}

// 创建合同字段
message ContractFromField {
  oneof value {
    string text = 1; // 文本
    bool checkbox = 2; // 勾选
  }
}

// 创建合同请求
message ContractCreateRequest {
  string template_id = 1; // 模板编号
  map<string, ContractFromField> values = 2; // 合同模板字段，key为字段名，value为字段值
}

// 创建合同响应
message ContractCreateResponse {
  string url = 1; // 创建合同合同文件地址
  string doc_id = 2; // 待签约文档编号
}

// 合同签署主体
enum ContractSignSubject {
  Enterprise = 0; // 企业
  Personal = 1; // 个人
}

// 合同签署实体
message ContractSignEntity {
  ContractSignSubject subject = 1; // 签署主体，必填
  string field = 2; // 签章字段，必填
  optional string image = 3; // 签章图片，BASE64编码，个人必填
  optional string name = 4; // 签署人，个人必填
  optional string province = 5; // 省份，个人必填
  optional string city = 6; // 城市，个人必填
  optional string address = 7; // 地址，个人必填
  optional string phone = 8; // 手机号，个人必填
  optional string idcard = 9; // 身份证号，个人必填
}

// 合同签署请求
// 个签属性和团签属性只能二选一（需要进行限制判定）
message ContractSignRequest {
  string doc_id = 1; // 待签约文档编号
  ContractSignEntity enterprise = 2; // 企业签署人
  ContractSignEntity personal = 3; // 个人签署人
}

// 合同签署响应
message ContractSignResponse {
  string status = 1; // 签署状态 SUCCESS:成功，FAIL:失败
  string file = 2; // 已签署合同文件地址
  string message = 3; // 其他消息，例如错误消息，成功时为空
}
