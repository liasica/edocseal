// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/liasica/edocseal/internal/ent/document"
	"github.com/liasica/edocseal/internal/model"
)

// DocumentCreate is the builder for creating a Document entity.
type DocumentCreate struct {
	config
	mutation *DocumentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetHash sets the "hash" field.
func (dc *DocumentCreate) SetHash(s string) *DocumentCreate {
	dc.mutation.SetHash(s)
	return dc
}

// SetStatus sets the "status" field.
func (dc *DocumentCreate) SetStatus(d document.Status) *DocumentCreate {
	dc.mutation.SetStatus(d)
	return dc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableStatus(d *document.Status) *DocumentCreate {
	if d != nil {
		dc.SetStatus(*d)
	}
	return dc
}

// SetTemplateID sets the "template_id" field.
func (dc *DocumentCreate) SetTemplateID(s string) *DocumentCreate {
	dc.mutation.SetTemplateID(s)
	return dc
}

// SetIDCardNumber sets the "id_card_number" field.
func (dc *DocumentCreate) SetIDCardNumber(s string) *DocumentCreate {
	dc.mutation.SetIDCardNumber(s)
	return dc
}

// SetExpiresAt sets the "expires_at" field.
func (dc *DocumentCreate) SetExpiresAt(t time.Time) *DocumentCreate {
	dc.mutation.SetExpiresAt(t)
	return dc
}

// SetSignedURL sets the "signed_url" field.
func (dc *DocumentCreate) SetSignedURL(s string) *DocumentCreate {
	dc.mutation.SetSignedURL(s)
	return dc
}

// SetNillableSignedURL sets the "signed_url" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableSignedURL(s *string) *DocumentCreate {
	if s != nil {
		dc.SetSignedURL(*s)
	}
	return dc
}

// SetUnsignedURL sets the "unsigned_url" field.
func (dc *DocumentCreate) SetUnsignedURL(s string) *DocumentCreate {
	dc.mutation.SetUnsignedURL(s)
	return dc
}

// SetNillableUnsignedURL sets the "unsigned_url" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableUnsignedURL(s *string) *DocumentCreate {
	if s != nil {
		dc.SetUnsignedURL(*s)
	}
	return dc
}

// SetPaths sets the "paths" field.
func (dc *DocumentCreate) SetPaths(m *model.Paths) *DocumentCreate {
	dc.mutation.SetPaths(m)
	return dc
}

// SetCreateAt sets the "create_at" field.
func (dc *DocumentCreate) SetCreateAt(t time.Time) *DocumentCreate {
	dc.mutation.SetCreateAt(t)
	return dc
}

// SetID sets the "id" field.
func (dc *DocumentCreate) SetID(s string) *DocumentCreate {
	dc.mutation.SetID(s)
	return dc
}

// Mutation returns the DocumentMutation object of the builder.
func (dc *DocumentCreate) Mutation() *DocumentMutation {
	return dc.mutation
}

// Save creates the Document in the database.
func (dc *DocumentCreate) Save(ctx context.Context) (*Document, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DocumentCreate) SaveX(ctx context.Context) *Document {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DocumentCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DocumentCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DocumentCreate) defaults() {
	if _, ok := dc.mutation.Status(); !ok {
		v := document.DefaultStatus
		dc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DocumentCreate) check() error {
	if _, ok := dc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Document.hash"`)}
	}
	if _, ok := dc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Document.status"`)}
	}
	if v, ok := dc.mutation.Status(); ok {
		if err := document.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Document.status": %w`, err)}
		}
	}
	if _, ok := dc.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template_id", err: errors.New(`ent: missing required field "Document.template_id"`)}
	}
	if _, ok := dc.mutation.IDCardNumber(); !ok {
		return &ValidationError{Name: "id_card_number", err: errors.New(`ent: missing required field "Document.id_card_number"`)}
	}
	if v, ok := dc.mutation.IDCardNumber(); ok {
		if err := document.IDCardNumberValidator(v); err != nil {
			return &ValidationError{Name: "id_card_number", err: fmt.Errorf(`ent: validator failed for field "Document.id_card_number": %w`, err)}
		}
	}
	if _, ok := dc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "Document.expires_at"`)}
	}
	if _, ok := dc.mutation.Paths(); !ok {
		return &ValidationError{Name: "paths", err: errors.New(`ent: missing required field "Document.paths"`)}
	}
	if _, ok := dc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "Document.create_at"`)}
	}
	return nil
}

func (dc *DocumentCreate) sqlSave(ctx context.Context) (*Document, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Document.ID type: %T", _spec.ID.Value)
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DocumentCreate) createSpec() (*Document, *sqlgraph.CreateSpec) {
	var (
		_node = &Document{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(document.Table, sqlgraph.NewFieldSpec(document.FieldID, field.TypeString))
	)
	_spec.OnConflict = dc.conflict
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.Hash(); ok {
		_spec.SetField(document.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := dc.mutation.Status(); ok {
		_spec.SetField(document.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := dc.mutation.TemplateID(); ok {
		_spec.SetField(document.FieldTemplateID, field.TypeString, value)
		_node.TemplateID = value
	}
	if value, ok := dc.mutation.IDCardNumber(); ok {
		_spec.SetField(document.FieldIDCardNumber, field.TypeString, value)
		_node.IDCardNumber = value
	}
	if value, ok := dc.mutation.ExpiresAt(); ok {
		_spec.SetField(document.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := dc.mutation.SignedURL(); ok {
		_spec.SetField(document.FieldSignedURL, field.TypeString, value)
		_node.SignedURL = value
	}
	if value, ok := dc.mutation.UnsignedURL(); ok {
		_spec.SetField(document.FieldUnsignedURL, field.TypeString, value)
		_node.UnsignedURL = value
	}
	if value, ok := dc.mutation.Paths(); ok {
		_spec.SetField(document.FieldPaths, field.TypeJSON, value)
		_node.Paths = value
	}
	if value, ok := dc.mutation.CreateAt(); ok {
		_spec.SetField(document.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Document.Create().
//		SetHash(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DocumentUpsert) {
//			SetHash(v+v).
//		}).
//		Exec(ctx)
func (dc *DocumentCreate) OnConflict(opts ...sql.ConflictOption) *DocumentUpsertOne {
	dc.conflict = opts
	return &DocumentUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dc *DocumentCreate) OnConflictColumns(columns ...string) *DocumentUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DocumentUpsertOne{
		create: dc,
	}
}

type (
	// DocumentUpsertOne is the builder for "upsert"-ing
	//  one Document node.
	DocumentUpsertOne struct {
		create *DocumentCreate
	}

	// DocumentUpsert is the "OnConflict" setter.
	DocumentUpsert struct {
		*sql.UpdateSet
	}
)

// SetHash sets the "hash" field.
func (u *DocumentUpsert) SetHash(v string) *DocumentUpsert {
	u.Set(document.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateHash() *DocumentUpsert {
	u.SetExcluded(document.FieldHash)
	return u
}

// SetStatus sets the "status" field.
func (u *DocumentUpsert) SetStatus(v document.Status) *DocumentUpsert {
	u.Set(document.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateStatus() *DocumentUpsert {
	u.SetExcluded(document.FieldStatus)
	return u
}

// SetTemplateID sets the "template_id" field.
func (u *DocumentUpsert) SetTemplateID(v string) *DocumentUpsert {
	u.Set(document.FieldTemplateID, v)
	return u
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateTemplateID() *DocumentUpsert {
	u.SetExcluded(document.FieldTemplateID)
	return u
}

// SetIDCardNumber sets the "id_card_number" field.
func (u *DocumentUpsert) SetIDCardNumber(v string) *DocumentUpsert {
	u.Set(document.FieldIDCardNumber, v)
	return u
}

// UpdateIDCardNumber sets the "id_card_number" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateIDCardNumber() *DocumentUpsert {
	u.SetExcluded(document.FieldIDCardNumber)
	return u
}

// SetExpiresAt sets the "expires_at" field.
func (u *DocumentUpsert) SetExpiresAt(v time.Time) *DocumentUpsert {
	u.Set(document.FieldExpiresAt, v)
	return u
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateExpiresAt() *DocumentUpsert {
	u.SetExcluded(document.FieldExpiresAt)
	return u
}

// SetSignedURL sets the "signed_url" field.
func (u *DocumentUpsert) SetSignedURL(v string) *DocumentUpsert {
	u.Set(document.FieldSignedURL, v)
	return u
}

// UpdateSignedURL sets the "signed_url" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateSignedURL() *DocumentUpsert {
	u.SetExcluded(document.FieldSignedURL)
	return u
}

// ClearSignedURL clears the value of the "signed_url" field.
func (u *DocumentUpsert) ClearSignedURL() *DocumentUpsert {
	u.SetNull(document.FieldSignedURL)
	return u
}

// SetUnsignedURL sets the "unsigned_url" field.
func (u *DocumentUpsert) SetUnsignedURL(v string) *DocumentUpsert {
	u.Set(document.FieldUnsignedURL, v)
	return u
}

// UpdateUnsignedURL sets the "unsigned_url" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateUnsignedURL() *DocumentUpsert {
	u.SetExcluded(document.FieldUnsignedURL)
	return u
}

// ClearUnsignedURL clears the value of the "unsigned_url" field.
func (u *DocumentUpsert) ClearUnsignedURL() *DocumentUpsert {
	u.SetNull(document.FieldUnsignedURL)
	return u
}

// SetPaths sets the "paths" field.
func (u *DocumentUpsert) SetPaths(v *model.Paths) *DocumentUpsert {
	u.Set(document.FieldPaths, v)
	return u
}

// UpdatePaths sets the "paths" field to the value that was provided on create.
func (u *DocumentUpsert) UpdatePaths() *DocumentUpsert {
	u.SetExcluded(document.FieldPaths)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *DocumentUpsert) SetCreateAt(v time.Time) *DocumentUpsert {
	u.Set(document.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateCreateAt() *DocumentUpsert {
	u.SetExcluded(document.FieldCreateAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(document.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DocumentUpsertOne) UpdateNewValues() *DocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(document.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Document.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DocumentUpsertOne) Ignore() *DocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DocumentUpsertOne) DoNothing() *DocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DocumentCreate.OnConflict
// documentation for more info.
func (u *DocumentUpsertOne) Update(set func(*DocumentUpsert)) *DocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DocumentUpsert{UpdateSet: update})
	}))
	return u
}

// SetHash sets the "hash" field.
func (u *DocumentUpsertOne) SetHash(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateHash() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateHash()
	})
}

// SetStatus sets the "status" field.
func (u *DocumentUpsertOne) SetStatus(v document.Status) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateStatus() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateStatus()
	})
}

// SetTemplateID sets the "template_id" field.
func (u *DocumentUpsertOne) SetTemplateID(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetTemplateID(v)
	})
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateTemplateID() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateTemplateID()
	})
}

// SetIDCardNumber sets the "id_card_number" field.
func (u *DocumentUpsertOne) SetIDCardNumber(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetIDCardNumber(v)
	})
}

// UpdateIDCardNumber sets the "id_card_number" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateIDCardNumber() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateIDCardNumber()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *DocumentUpsertOne) SetExpiresAt(v time.Time) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateExpiresAt() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetSignedURL sets the "signed_url" field.
func (u *DocumentUpsertOne) SetSignedURL(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetSignedURL(v)
	})
}

// UpdateSignedURL sets the "signed_url" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateSignedURL() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateSignedURL()
	})
}

// ClearSignedURL clears the value of the "signed_url" field.
func (u *DocumentUpsertOne) ClearSignedURL() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearSignedURL()
	})
}

// SetUnsignedURL sets the "unsigned_url" field.
func (u *DocumentUpsertOne) SetUnsignedURL(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetUnsignedURL(v)
	})
}

// UpdateUnsignedURL sets the "unsigned_url" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateUnsignedURL() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateUnsignedURL()
	})
}

// ClearUnsignedURL clears the value of the "unsigned_url" field.
func (u *DocumentUpsertOne) ClearUnsignedURL() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearUnsignedURL()
	})
}

// SetPaths sets the "paths" field.
func (u *DocumentUpsertOne) SetPaths(v *model.Paths) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetPaths(v)
	})
}

// UpdatePaths sets the "paths" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdatePaths() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdatePaths()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *DocumentUpsertOne) SetCreateAt(v time.Time) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateCreateAt() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateCreateAt()
	})
}

// Exec executes the query.
func (u *DocumentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DocumentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DocumentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DocumentUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DocumentUpsertOne.ID is not supported by MySQL driver. Use DocumentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DocumentUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// Save creates the Document in the database.
func (u *DocumentUpsertOne) Save(ctx context.Context) (*Document, error) {
	if len(u.create.conflict) == 0 {
		return nil, errors.New("ent: missing options for DocumentCreate.OnConflict")
	}
	return u.create.Save(ctx)
}

// DocumentCreateBulk is the builder for creating many Document entities in bulk.
type DocumentCreateBulk struct {
	config
	err      error
	builders []*DocumentCreate
	conflict []sql.ConflictOption
}

// Save creates the Document entities in the database.
func (dcb *DocumentCreateBulk) Save(ctx context.Context) ([]*Document, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Document, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DocumentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DocumentCreateBulk) SaveX(ctx context.Context) []*Document {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DocumentCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DocumentCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Document.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DocumentUpsert) {
//			SetHash(v+v).
//		}).
//		Exec(ctx)
func (dcb *DocumentCreateBulk) OnConflict(opts ...sql.ConflictOption) *DocumentUpsertBulk {
	dcb.conflict = opts
	return &DocumentUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcb *DocumentCreateBulk) OnConflictColumns(columns ...string) *DocumentUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DocumentUpsertBulk{
		create: dcb,
	}
}

// DocumentUpsertBulk is the builder for "upsert"-ing
// a bulk of Document nodes.
type DocumentUpsertBulk struct {
	create *DocumentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(document.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DocumentUpsertBulk) UpdateNewValues() *DocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(document.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DocumentUpsertBulk) Ignore() *DocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DocumentUpsertBulk) DoNothing() *DocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DocumentCreateBulk.OnConflict
// documentation for more info.
func (u *DocumentUpsertBulk) Update(set func(*DocumentUpsert)) *DocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DocumentUpsert{UpdateSet: update})
	}))
	return u
}

// SetHash sets the "hash" field.
func (u *DocumentUpsertBulk) SetHash(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateHash() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateHash()
	})
}

// SetStatus sets the "status" field.
func (u *DocumentUpsertBulk) SetStatus(v document.Status) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateStatus() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateStatus()
	})
}

// SetTemplateID sets the "template_id" field.
func (u *DocumentUpsertBulk) SetTemplateID(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetTemplateID(v)
	})
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateTemplateID() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateTemplateID()
	})
}

// SetIDCardNumber sets the "id_card_number" field.
func (u *DocumentUpsertBulk) SetIDCardNumber(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetIDCardNumber(v)
	})
}

// UpdateIDCardNumber sets the "id_card_number" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateIDCardNumber() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateIDCardNumber()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *DocumentUpsertBulk) SetExpiresAt(v time.Time) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateExpiresAt() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetSignedURL sets the "signed_url" field.
func (u *DocumentUpsertBulk) SetSignedURL(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetSignedURL(v)
	})
}

// UpdateSignedURL sets the "signed_url" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateSignedURL() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateSignedURL()
	})
}

// ClearSignedURL clears the value of the "signed_url" field.
func (u *DocumentUpsertBulk) ClearSignedURL() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearSignedURL()
	})
}

// SetUnsignedURL sets the "unsigned_url" field.
func (u *DocumentUpsertBulk) SetUnsignedURL(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetUnsignedURL(v)
	})
}

// UpdateUnsignedURL sets the "unsigned_url" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateUnsignedURL() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateUnsignedURL()
	})
}

// ClearUnsignedURL clears the value of the "unsigned_url" field.
func (u *DocumentUpsertBulk) ClearUnsignedURL() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearUnsignedURL()
	})
}

// SetPaths sets the "paths" field.
func (u *DocumentUpsertBulk) SetPaths(v *model.Paths) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetPaths(v)
	})
}

// UpdatePaths sets the "paths" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdatePaths() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdatePaths()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *DocumentUpsertBulk) SetCreateAt(v time.Time) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateCreateAt() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateCreateAt()
	})
}

// Exec executes the query.
func (u *DocumentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DocumentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DocumentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DocumentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
