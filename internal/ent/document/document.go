// Code generated by ent, DO NOT EDIT.

package document

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the document type in the database.
	Label = "document"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTemplateID holds the string denoting the template_id field in the database.
	FieldTemplateID = "template_id"
	// FieldIDCardNumber holds the string denoting the id_card_number field in the database.
	FieldIDCardNumber = "id_card_number"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// FieldSignedURL holds the string denoting the signed_url field in the database.
	FieldSignedURL = "signed_url"
	// FieldUnsignedURL holds the string denoting the unsigned_url field in the database.
	FieldUnsignedURL = "unsigned_url"
	// FieldPaths holds the string denoting the paths field in the database.
	FieldPaths = "paths"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// Table holds the table name of the document in the database.
	Table = "document"
)

// Columns holds all SQL columns for document fields.
var Columns = []string{
	FieldID,
	FieldHash,
	FieldStatus,
	FieldTemplateID,
	FieldIDCardNumber,
	FieldExpiresAt,
	FieldSignedURL,
	FieldUnsignedURL,
	FieldPaths,
	FieldCreateAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IDCardNumberValidator is a validator for the "id_card_number" field. It is called by the builders before save.
	IDCardNumberValidator func(string) error
)

// Status defines the type for the "status" enum field.
type Status string

// StatusUnsigned is the default value of the Status enum.
const DefaultStatus = StatusUnsigned

// Status values.
const (
	StatusUnsigned Status = "unsigned"
	StatusSigned   Status = "signed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusUnsigned, StatusSigned:
		return nil
	default:
		return fmt.Errorf("document: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Document queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHash orders the results by the hash field.
func ByHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHash, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTemplateID orders the results by the template_id field.
func ByTemplateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTemplateID, opts...).ToFunc()
}

// ByIDCardNumber orders the results by the id_card_number field.
func ByIDCardNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDCardNumber, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expires_at field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// BySignedURL orders the results by the signed_url field.
func BySignedURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignedURL, opts...).ToFunc()
}

// ByUnsignedURL orders the results by the unsigned_url field.
func ByUnsignedURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnsignedURL, opts...).ToFunc()
}

// ByCreateAt orders the results by the create_at field.
func ByCreateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateAt, opts...).ToFunc()
}
