// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/liasica/edocseal/internal/ent/certification"
	"github.com/liasica/edocseal/internal/ent/predicate"
)

// CertificationUpdate is the builder for updating Certification entities.
type CertificationUpdate struct {
	config
	hooks     []Hook
	mutation  *CertificationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CertificationUpdate builder.
func (cu *CertificationUpdate) Where(ps ...predicate.Certification) *CertificationUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetIDCardNumber sets the "id_card_number" field.
func (cu *CertificationUpdate) SetIDCardNumber(s string) *CertificationUpdate {
	cu.mutation.SetIDCardNumber(s)
	return cu
}

// SetNillableIDCardNumber sets the "id_card_number" field if the given value is not nil.
func (cu *CertificationUpdate) SetNillableIDCardNumber(s *string) *CertificationUpdate {
	if s != nil {
		cu.SetIDCardNumber(*s)
	}
	return cu
}

// SetPrivatePath sets the "private_path" field.
func (cu *CertificationUpdate) SetPrivatePath(s string) *CertificationUpdate {
	cu.mutation.SetPrivatePath(s)
	return cu
}

// SetNillablePrivatePath sets the "private_path" field if the given value is not nil.
func (cu *CertificationUpdate) SetNillablePrivatePath(s *string) *CertificationUpdate {
	if s != nil {
		cu.SetPrivatePath(*s)
	}
	return cu
}

// SetCertPath sets the "cert_path" field.
func (cu *CertificationUpdate) SetCertPath(s string) *CertificationUpdate {
	cu.mutation.SetCertPath(s)
	return cu
}

// SetNillableCertPath sets the "cert_path" field if the given value is not nil.
func (cu *CertificationUpdate) SetNillableCertPath(s *string) *CertificationUpdate {
	if s != nil {
		cu.SetCertPath(*s)
	}
	return cu
}

// SetExpiresAt sets the "expires_at" field.
func (cu *CertificationUpdate) SetExpiresAt(t time.Time) *CertificationUpdate {
	cu.mutation.SetExpiresAt(t)
	return cu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (cu *CertificationUpdate) SetNillableExpiresAt(t *time.Time) *CertificationUpdate {
	if t != nil {
		cu.SetExpiresAt(*t)
	}
	return cu
}

// Mutation returns the CertificationMutation object of the builder.
func (cu *CertificationUpdate) Mutation() *CertificationMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CertificationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CertificationUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CertificationUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CertificationUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CertificationUpdate) check() error {
	if v, ok := cu.mutation.IDCardNumber(); ok {
		if err := certification.IDCardNumberValidator(v); err != nil {
			return &ValidationError{Name: "id_card_number", err: fmt.Errorf(`ent: validator failed for field "Certification.id_card_number": %w`, err)}
		}
	}
	if v, ok := cu.mutation.PrivatePath(); ok {
		if err := certification.PrivatePathValidator(v); err != nil {
			return &ValidationError{Name: "private_path", err: fmt.Errorf(`ent: validator failed for field "Certification.private_path": %w`, err)}
		}
	}
	if v, ok := cu.mutation.CertPath(); ok {
		if err := certification.CertPathValidator(v); err != nil {
			return &ValidationError{Name: "cert_path", err: fmt.Errorf(`ent: validator failed for field "Certification.cert_path": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CertificationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CertificationUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CertificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(certification.Table, certification.Columns, sqlgraph.NewFieldSpec(certification.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.IDCardNumber(); ok {
		_spec.SetField(certification.FieldIDCardNumber, field.TypeString, value)
	}
	if value, ok := cu.mutation.PrivatePath(); ok {
		_spec.SetField(certification.FieldPrivatePath, field.TypeString, value)
	}
	if value, ok := cu.mutation.CertPath(); ok {
		_spec.SetField(certification.FieldCertPath, field.TypeString, value)
	}
	if value, ok := cu.mutation.ExpiresAt(); ok {
		_spec.SetField(certification.FieldExpiresAt, field.TypeTime, value)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CertificationUpdateOne is the builder for updating a single Certification entity.
type CertificationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CertificationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetIDCardNumber sets the "id_card_number" field.
func (cuo *CertificationUpdateOne) SetIDCardNumber(s string) *CertificationUpdateOne {
	cuo.mutation.SetIDCardNumber(s)
	return cuo
}

// SetNillableIDCardNumber sets the "id_card_number" field if the given value is not nil.
func (cuo *CertificationUpdateOne) SetNillableIDCardNumber(s *string) *CertificationUpdateOne {
	if s != nil {
		cuo.SetIDCardNumber(*s)
	}
	return cuo
}

// SetPrivatePath sets the "private_path" field.
func (cuo *CertificationUpdateOne) SetPrivatePath(s string) *CertificationUpdateOne {
	cuo.mutation.SetPrivatePath(s)
	return cuo
}

// SetNillablePrivatePath sets the "private_path" field if the given value is not nil.
func (cuo *CertificationUpdateOne) SetNillablePrivatePath(s *string) *CertificationUpdateOne {
	if s != nil {
		cuo.SetPrivatePath(*s)
	}
	return cuo
}

// SetCertPath sets the "cert_path" field.
func (cuo *CertificationUpdateOne) SetCertPath(s string) *CertificationUpdateOne {
	cuo.mutation.SetCertPath(s)
	return cuo
}

// SetNillableCertPath sets the "cert_path" field if the given value is not nil.
func (cuo *CertificationUpdateOne) SetNillableCertPath(s *string) *CertificationUpdateOne {
	if s != nil {
		cuo.SetCertPath(*s)
	}
	return cuo
}

// SetExpiresAt sets the "expires_at" field.
func (cuo *CertificationUpdateOne) SetExpiresAt(t time.Time) *CertificationUpdateOne {
	cuo.mutation.SetExpiresAt(t)
	return cuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (cuo *CertificationUpdateOne) SetNillableExpiresAt(t *time.Time) *CertificationUpdateOne {
	if t != nil {
		cuo.SetExpiresAt(*t)
	}
	return cuo
}

// Mutation returns the CertificationMutation object of the builder.
func (cuo *CertificationUpdateOne) Mutation() *CertificationMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CertificationUpdate builder.
func (cuo *CertificationUpdateOne) Where(ps ...predicate.Certification) *CertificationUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CertificationUpdateOne) Select(field string, fields ...string) *CertificationUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Certification entity.
func (cuo *CertificationUpdateOne) Save(ctx context.Context) (*Certification, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CertificationUpdateOne) SaveX(ctx context.Context) *Certification {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CertificationUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CertificationUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CertificationUpdateOne) check() error {
	if v, ok := cuo.mutation.IDCardNumber(); ok {
		if err := certification.IDCardNumberValidator(v); err != nil {
			return &ValidationError{Name: "id_card_number", err: fmt.Errorf(`ent: validator failed for field "Certification.id_card_number": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.PrivatePath(); ok {
		if err := certification.PrivatePathValidator(v); err != nil {
			return &ValidationError{Name: "private_path", err: fmt.Errorf(`ent: validator failed for field "Certification.private_path": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.CertPath(); ok {
		if err := certification.CertPathValidator(v); err != nil {
			return &ValidationError{Name: "cert_path", err: fmt.Errorf(`ent: validator failed for field "Certification.cert_path": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CertificationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CertificationUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CertificationUpdateOne) sqlSave(ctx context.Context) (_node *Certification, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(certification.Table, certification.Columns, sqlgraph.NewFieldSpec(certification.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Certification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, certification.FieldID)
		for _, f := range fields {
			if !certification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != certification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.IDCardNumber(); ok {
		_spec.SetField(certification.FieldIDCardNumber, field.TypeString, value)
	}
	if value, ok := cuo.mutation.PrivatePath(); ok {
		_spec.SetField(certification.FieldPrivatePath, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CertPath(); ok {
		_spec.SetField(certification.FieldCertPath, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ExpiresAt(); ok {
		_spec.SetField(certification.FieldExpiresAt, field.TypeTime, value)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Certification{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
