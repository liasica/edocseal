// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/liasica/edocseal/internal/ent/document"
	"github.com/liasica/edocseal/internal/model"
)

// Document is the model entity for the Document schema.
type Document struct {
	config `json:"-"`
	// ID of the ent.
	// 文档ID
	ID string `json:"id,omitempty"`
	// 参数哈希
	Hash string `json:"hash,omitempty"`
	// 文档状态，文档超时后需删除
	Status document.Status `json:"status,omitempty"`
	// 模板ID
	TemplateID string `json:"template_id,omitempty"`
	// 身份证号码
	IDCardNumber string `json:"id_card_number,omitempty"`
	// 过期时间
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// 已签约短链接
	SignedURL string `json:"signed_url,omitempty"`
	// 已签约短链接
	UnsignedURL string `json:"unsigned_url,omitempty"`
	// 文档各项路径
	Paths        *model.Paths `json:"paths,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Document) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case document.FieldPaths:
			values[i] = new([]byte)
		case document.FieldID, document.FieldHash, document.FieldStatus, document.FieldTemplateID, document.FieldIDCardNumber, document.FieldSignedURL, document.FieldUnsignedURL:
			values[i] = new(sql.NullString)
		case document.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Document fields.
func (d *Document) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case document.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				d.ID = value.String
			}
		case document.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				d.Hash = value.String
			}
		case document.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				d.Status = document.Status(value.String)
			}
		case document.FieldTemplateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template_id", values[i])
			} else if value.Valid {
				d.TemplateID = value.String
			}
		case document.FieldIDCardNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id_card_number", values[i])
			} else if value.Valid {
				d.IDCardNumber = value.String
			}
		case document.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				d.ExpiresAt = value.Time
			}
		case document.FieldSignedURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field signed_url", values[i])
			} else if value.Valid {
				d.SignedURL = value.String
			}
		case document.FieldUnsignedURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unsigned_url", values[i])
			} else if value.Valid {
				d.UnsignedURL = value.String
			}
		case document.FieldPaths:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field paths", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.Paths); err != nil {
					return fmt.Errorf("unmarshal field paths: %w", err)
				}
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Document.
// This includes values selected through modifiers, order, etc.
func (d *Document) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// Update returns a builder for updating this Document.
// Note that you need to call Document.Unwrap() before calling this method if this Document
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Document) Update() *DocumentUpdateOne {
	return NewDocumentClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Document entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Document) Unwrap() *Document {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Document is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Document) String() string {
	var builder strings.Builder
	builder.WriteString("Document(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("hash=")
	builder.WriteString(d.Hash)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", d.Status))
	builder.WriteString(", ")
	builder.WriteString("template_id=")
	builder.WriteString(d.TemplateID)
	builder.WriteString(", ")
	builder.WriteString("id_card_number=")
	builder.WriteString(d.IDCardNumber)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(d.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("signed_url=")
	builder.WriteString(d.SignedURL)
	builder.WriteString(", ")
	builder.WriteString("unsigned_url=")
	builder.WriteString(d.UnsignedURL)
	builder.WriteString(", ")
	builder.WriteString("paths=")
	builder.WriteString(fmt.Sprintf("%v", d.Paths))
	builder.WriteByte(')')
	return builder.String()
}

// Documents is a parsable slice of Document.
type Documents []*Document
